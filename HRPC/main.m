clear

env = Environments(101325,298,'motor1'); % Pa % K % motorfile

%% State function initial condition and solution

state_0 = [env.Motor.n_oxv, env.Motor.n_oxl, env.Motor.T_T, env.Motor.R_p, env.Motor.P_C, 0, 0]; % kmol/s, kmol/s, K
%state_0 = [env.Motor.n_oxv,env.Motor.n_oxl,env.Motor.T_T];
tspan = 0:0.05:10; % s

opts = odeset('Events', @stopEvent);
[t,state] = ode45(@(t,state) HRPC_function(t,state,env),tspan,state_0,opts);

%%  Plot results 
figure(1), subplot(2,3,1), plot(t(:),state(:,3),'r','LineWidth',2),grid, ... 
    title('Temperature vs. Time'),... 
    xlabel('Time [s]'),... 
    ylabel('Temperature [K]');
subplot(2,3,2), plot(t(:),state(:,1),'b',t(:),state(:,2),'g','LineWidth',2),grid, ... 
    title('kmol of N20 vs. Time'),... 
    xlabel('Time [s]'),... 
    ylabel('kmol of N2O [kmol]'),... 
    legend('kmol of N2O gas','kmol of N2O liquid');
subplot(2,3,3), plot(t(:),state(:,4),'r','LineWidth',2),grid, ... 
    title('Port Radius vs. Time'),... 
    xlabel('Time [s]'),... 
    ylabel('Radius [m]');
P_T = (state(:,1) + env.Motor.n_spv) * env.R_u .* state(:,3) ...
    ./ (env.Motor.V_T - state(:,2).*env.Motor.V_mol_oxl(state(:,3)));
subplot(2,3,4), plot(t(:),state(:,5)/100000,'b',t(:),P_T/100000,'r','LineWidth',2),grid, ... 
    title('Chamber Pressure vs. Time'),... 
    xlabel('Time [s]'),... 
    ylabel('Pressure [bar]');
subplot(2,3,5), plot(t(:),state(:,6),'b',t(:),state(:,7),'g','LineWidth',2),grid, ... 
    title('Chamber Mass vs. Time'),... 
    xlabel('Time [s]'),... 
    ylabel('Chamber Mass [kg]'),... 
    legend('kg N2O','kg Paraffin','Location','northwest');
% subplot(2,3,7), plot(t(2:length(t)),diff(state(:,8))/100000,'b','LineWidth',2),grid, ... 
%     title('Chamber Pressure 2 vs. Time'),... 
%     xlabel('Time [s]'),... 
%     ylabel('Pressure [bar]');
% subplot(2,3,7), plot(t(2:length(t)),diff(state(:,6)),'b',t(2:length(t)),diff(state(:,7)),'g','LineWidth',2),grid, ... 
%     title('Mass Flow vs. Time'),... 
%     xlabel('Time [s]'),... 
%     ylabel('Massflow [kg/s]'),... 
%     legend('kg/s N2O','kg/s fuel');


%% Stop integration event
function [value, isterminal, direction] = stopEvent(t, state)
    %% stops ode integration when the max height is reached
    if (state(2) <= 0 || state(5) < 101325)% || state(4) >= env.Motor.R_p_f) % Liquid N2O depleted, Inverse flow nozzle
        value = 0; % when value = 0, an event is triggered
    else
        value =1;
    end
    isterminal = 1; % terminate after the first event
    direction = 0; % get all the zeros
end